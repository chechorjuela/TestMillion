import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { fetchOwners } from '../../features/owners/ownerSlice';
import { ownerService } from '../../features/owners/ownerService';
import { Modal } from "../atoms/Modal";
import { Button } from '../atoms/Button';
import { Input } from '../atoms/Input';
import type {AppDispatch} from '../../store/store';

interface AddOwnerModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const AddOwnerModal = ({ isOpen, onClose }: AddOwnerModalProps) => {
  const dispatch = useDispatch<AppDispatch>();
  const [formData, setFormData] = useState({
    name: '',
    address: '',
    birthday: '',
    photo: '',
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await ownerService.createOwner({
        Name: formData.name,
        Address: formData.address,
        Birthdate: formData.birthday, // Ya viene en formato YYYY-MM-DD del input type="date"
        Photo: formData.photo || undefined,
      });

      // Recargar la lista
      dispatch(fetchOwners({ PageNumber: 1, PageSize: 10 }));
      onClose();
      
      // Limpiar el formulario
      setFormData({
        name: '',
        address: '',
        birthday: '',
        photo: '',
      });
    } catch (error) {
      console.error('Error creating owner:', error);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Add Owner">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <Input
            label="Name"
            type="text"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <Input
            label="Address"
            type="text"
            name="address"
            value={formData.address}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <Input
            label="Birthday"
            type="date"
            name="birthday"
            value={formData.birthday}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <Input
            label="Photo"
            type="text"
            name="photo"
            value={formData.photo}
            onChange={handleInputChange}
            placeholder="Enter image URL"
          />
        </div>
        <div className="flex justify-end space-x-2">
          <Button type="button" variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit">
            Add Owner
          </Button>
        </div>
      </form>
    </Modal>
  );
};