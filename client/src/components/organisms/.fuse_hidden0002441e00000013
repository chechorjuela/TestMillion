import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { fetchPropertyImages } from '../../features/propertyImages/propertyImageSlice';
import { propertyImageService } from '../../features/propertyImages/propertyImageService';
import { Modal } from "../atoms/Modal";
import { Button } from '../atoms/Button';
import { Input } from '../atoms/Input';
import type {AppDispatch} from '../../store/store';

interface AddPropertyImageModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const AddPropertyImageModal = ({ isOpen, onClose }: AddPropertyImageModalProps) => {
  const dispatch = useDispatch<AppDispatch>();
  const [formData, setFormData] = useState({
    file: '',
    idProperty: '',
    enabled: true,
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    if (type === 'checkbox') {
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await propertyImageService.createPropertyImage({
        file: formData.file,
        idProperty: formData.idProperty,
        enabled: formData.enabled
      });

      // Recargar la lista
      dispatch(fetchPropertyImages({ PageNumber: 1, PageSize: 10 }));
      onClose();
      
      // Limpiar el formulario
      setFormData({
        file: '',
        idProperty: '',
        enabled: true,
      });
    } catch (error) {
      console.error('Error creating property image:', error);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Add Property Image">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <Input
            label="Property ID"
            type="text"
            name="idProperty"
            value={formData.idProperty}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <Input
            label="Image URL"
            type="text"
            name="file"
            value={formData.file}
            onChange={handleInputChange}
            placeholder="Enter image URL"
            required
          />
        </div>
        <div className="flex items-center justify-between p-2 bg-gray-50 rounded-md">
          <div className="flex items-center space-x-2">
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                name="enabled"
                checked={formData.enabled}
                onChange={handleInputChange}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
            </label>
            <span className="text-sm font-medium text-gray-900">Enable this image</span>
          </div>
        </div>
        <div className="flex justify-end space-x-2">
          <Button type="button" variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit">
            Add Property Image
          </Button>
        </div>
      </form>
    </Modal>
  );
};